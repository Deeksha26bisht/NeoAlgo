/*Given a singly linked list and a number k. Write a function to find the (N/k)th element, where N is the number of elements in the list. 
We need to consider ceil value in case of decimals.
Input:
2
6
1 2 3 4 5 6
2
5
2 7 9 3 5
3

Output:
3
7

Explanation:
Testcase 1:
 6/2th element is the 3rd(1-based indexing) element which is 3.*/

#include<bits/stdc++.h>
using namespace std;

int fractional_node(struct Node* head,int k);

struct Node
{
    int data;
    struct Node *next;
    
    Node(int x){
        data = x;
        next = NULL;
    }
    
};

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        Node* ptr,*start = NULL,*ptr1;
        int n,i;
        cin>>n;
        
        for(i=0;i<n;i++)
        {
            int value;
            cin>>value;
            
            ptr=new Node(value);
            
            if(start==NULL)
            {
                start=ptr;
                ptr1=ptr;
            }
            else
            {
                ptr1->next=ptr;
                ptr1=ptr1->next;
            }
        }
        ptr1->next=NULL;
        int k;
        cin>>k;
        int p = fractional_node(start,k);
        cout<<p<<endl;
    }
}

int fractional_node(struct Node *head, int k)
{
    
    int n=0;
    Node *temp=head;
    if(head==NULL)
    return 0;
    temp=head;
    
    while(temp->next!=NULL)
    {
        n++;
        temp=temp->next;
    }
    
    int x= n/k;
    
    while(x--)
    {
        head=head->next;
        
    }
    return head->data;
}
